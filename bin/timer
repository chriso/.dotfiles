#!/usr/bin/env python

import sys
import time


def main():
    if len(sys.argv) == 1:
        write('usage: %s <duration>\n' % sys.argv[0], sys.stderr)
        exit(1)
    try:
        duration_str = ' '.join(sys.argv[1:])
        timer(duration_str)
    except KeyboardInterrupt:
        write('\n')
        exit(1)
    except ValueError as err:
        write('error: %s\n' % err, sys.stderr)
        exit(1)


def timer(duration_str):
    """Display a countdown timer."""
    duration = parse_duration(duration_str)
    for remaining_seconds in countdown(duration):
        write(' ' * 10 + '\r')  # clear line
        write(format_time(remaining_seconds))
    write('\n')


def parse_duration(duration_str):
    """Parse a duration string, e.g. '1h', '3mins' or '5 seconds' and return
    a duration in seconds."""
    if not duration_str[0].isdigit():
        raise ValueError('invalid duration "%s"' % duration_str)
    split = max(i + 1 for i, char in enumerate(duration_str) if char.isdigit())
    duration = int(duration_str[:split])
    suffix = duration_str[split:].strip()
    if suffix in ('', 's', 'sec', 'secs', 'second', 'seconds'):
        pass
    elif suffix in ('m', 'min', 'mins', 'minute', 'minutes'):
        duration *= 60
    elif suffix in ('h', 'hour', 'hours'):
        duration *= 3600
    elif suffix in ('d', 'day', 'days'):
        duration *= 86400
    else:
        raise ValueError('unknown duration suffix "%s"' % suffix)
    return duration


def countdown(duration, interval=0.2):
    """Count down from `duration` and yield remaining seconds."""
    now = time.time()
    end_time = now + duration
    while now < end_time:
        yield int(end_time - now)
        time.sleep(interval)
        now = time.time()


def format_time(seconds):
    """Format a time in seconds, e.g. 7200 => '02:00:00', 321 => '00:05:21'."""
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    return '{:0>2}:{:0>2}:{:0>2}'.format(hours, minutes, seconds)


def write(string, stream=sys.stdout):
    """Write to a stream."""
    stream.write(string)
    stream.flush()


if __name__ == '__main__':
    main()
